generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          String      @id @default(uuid())
  name        String      @default("Novo usuário")
  username    String      @unique
  email       String      @unique
  role        UserRole    @default(USER)
  created_at  DateTime    @default(now())
  is_verified Boolean     @default(false)
  password    String
  avatar      String?     @default("https://firebasestorage.googleapis.com/v0/b/banco-imagens-art-rj.appspot.com/o/avatar%2Fdescomplica-mascote.png?alt=media&token=bf749128-f61f-4b34-8c75-b2fde6722313")
  course_id   Int?
  course      Course?     @relation(fields: [course_id], references: [id])
  Comment     Comment[]
  Post        Post[]
  UserInfos   UserInfos[]
  Avatar      Avatar[]

  @@map("users")
}

enum GenderType {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  NOT_INFORMED
}

model UserInfos {
  headline String?     @default("Escreva um pouco sobre você aqui")
  cep      String?     @default("00000000")
  address  String?     @default("Brasil")
  phone    String?     @default("00000000000")
  birthday String?     @default("0000-00-00")
  gender   GenderType? @default(NOT_INFORMED)
  links    Json?
  user_id  String      @id @unique
  user     User?       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_infos")
}

model Course {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  status     Boolean  @default(true)
  users      User[]

  @@map("courses")
}

enum PostType {
  PUBLIC
  COURSE
}

enum AvatarType {
  MALE
  FEMALE
}

model Avatar {
  id            String     @id @default(uuid())
  gender        AvatarType
  url           String
  created_at    DateTime   @default(now())
  created_by_id String
  created_by    User       @relation(fields: [created_by_id], references: [id])

  @@map("avatars")
}

model Post {
  id            String    @id @default(uuid())
  content       String
  created_at    DateTime  @default(now())
  type          PostType? @default(PUBLIC)
  author_id     String
  author        User?     @relation(fields: [author_id], references: [id])
  comments      Comment[]
  likes         Likes[]
  its_published Boolean   @default(true)

  @@map("posts")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  post_id    String
  author_id  String
  author     User?    @relation(fields: [author_id], references: [id])
  Post       Post?    @relation(fields: [post_id], references: [id])
  likes      Likes[]
  created_at DateTime @default(now())

  @@map("comments")
}

model Likes {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  user_id    String
  post       Post?    @relation(fields: [post_id], references: [id])
  post_id    String?
  comments   Comment? @relation(fields: [comment_id], references: [id])
  comment_id String?

  @@map("likes")
}

model AuthenticateAccount {
  id         String    @id @default(uuid())
  user_id    String
  expires_at DateTime? // 5min
  code       String

  @@map("authenticate_account")
}
